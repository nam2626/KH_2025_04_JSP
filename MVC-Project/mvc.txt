MVC 패턴 
	Model - View - Controller
	
Model(모델) : 애플리케이션의 데이터와 비지니스 로직을 담당함. 
			 데이터베이스를 사용하는 부분, 유효섬검 등의 핵심기능을 수행하는 클래스
			 (DTO, Service, DAO)

View(뷰) : 사용자에게 데이터 및 문서를 표시하는 역할. 
		  UI를 담당하는 부분, Model로부터 받은 내용을 화면에 렌더링하는 기능
		  
Controller(컨트롤러) : 사용자의 요청을 처리하고 Model과 View를 연결하는 역할.
				     사용자의 요청을 받아서 적절한 Model의 기능을 실행해고 
				     그 결과를 특정 뷰로 보여줄지 결정
	
Business Logic(비지니스 로직) : 애플리케이션의 특정 업무를 수행하는 규칙과 과정을 정의하는 코드
							 데이터를 어떻게 처리하고, 어떤 계산을 수행하며, 
							 어떤 조건에서 특정 동작을 할지 결정하는 알고리즘을 포함하는 코드
							 
	1. 회원 가입시 아이디 유효성 검사 : 회원 가입 전 해당아이디가 있는지 확인
	2. 주문 처리 : 고객이 상품 주문했을때, 재고 확인 및 결제 처리, 주문 내역 DB 저장하는 과정
	3. 할인률 계산 : 회원 등급에 따라 할인률을 차증 적용하는 과정.
	
	
주요 클래스 역할
DTO(Data Transfer Object) : 데이터를 전달하기 위한 클래스, 
	  주로 DB 레코드 또는 비지니스 로직에 필요한 데이터 묶음을 표현할 떄 사용함
	  기본 생성자, Setter/Getter
	  
VO(Value Object) : 값을 표현하는 객체, DTO와 유사하긴 하지만 VO는 생성되면 변경할 수 없는 값.
				   객체 비교를 하거나, 특정 비지니스 값을 표현하는데 적합.
				   값을 표현하는데 목적을 둠 

Service : 애플리케이션의 비지니스 로직을 담당하는 핵심적인 클래스. 컨트롤러와 DAO 사이에 존재함.
		  Controller로 부터 요청 받아서 실제 업무 처리하고, 필요에 따라서 DAO로 데이터가지고 와서 작업
		  그 결과를 Controller로 반환. 각종 시나리오를 구현할 수 있음(트랙잭션 관리), 
		  데이터 유효성 검사, 데이터 처리 조건, 계산에 대한 규칙과 절차가 여기에 해당됨. 

DAO(Data Access Object) : 데이터베이스나 파일 시스템과 같은 데이터 저장소에 접근하는 코드 

Controller : 사용자의 요청을 가장 먼저 받아서 처리하는 코드, 어떤 Service 기능을 호출할지 결정, 
			 어떤 View를 사용자에게 보여줄지 결정하는 클래스 

HandlerMapping : DispatcherServlet에서 클라이언트 요청을 받은 작업을 어떤 Controller가 수행할지 결정
	
DispatcherServlet : 모든 사용자의 요청을 받는 클래스. 사용자가 요청한 작업을 수행을 Controller를
				    HandlerMapping으로부터 받아서 Controller를 실행하는 클래스.
				    Controller 결과로 보내준 뷰를 사용자에게 전달하는 클래스. 	
	
	
	
	
	
	
	